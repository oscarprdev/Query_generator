generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Databases {
    mongoDb
    postgreSQL
}

enum QueryAction {
    create
    read     
    update
    delete
    upsert
    count
    aggregate
}

enum PostgresType {
    text
    integer
    bigint
    real
    boolean
    date
    json
    uuid
    any
}

enum MongoType {
    string
    number
    boolean
    date
    object
    array
    uuid
    any
}

enum PostgreConstraint {
    primaryKey
    foreignKey
    notNull
    unique
    any
}

enum MongoConstraint {
    primaryKey
    unique
    any
}

model Users {
    id                String              @id @default(uuid()) 
    
    projects         Project[]
}

model Project {
    id                String              @id @default(uuid()) @unique
    title             String              @unique
    createdAt         DateTime            @default(now()) @unique
    updatedAt         DateTime            @updatedAt

    database          Databases  

    ownerId           String              
    owner             Users               @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    postgreTableId    String?           
    mongoTableId      String?

    postgreTable      PostgreTable[]      
    mongoTable        MongoTable[]  

    queryId           String?
    query             Query[]       
}

model PostgreTable {
    id                String              @id @default(uuid()) @unique
    title             String              @unique
    createdAt         DateTime            @default(now()) @unique
    updatedAt         DateTime            @updatedAt

    rows              PostgreRow[]

    projectId         String           
    project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model MongoTable {
    id                String              @id @default(uuid()) @unique
    title             String              @unique
    createdAt         DateTime            @default(now()) @unique
    updatedAt         DateTime            @updatedAt

    rows              MongoRow[]

    projectId         String           
    project           Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model PostgreRow {
    id                String              @id @default(uuid()) @unique
    name              String
    value             String              
    type              PostgresType
    constraints       PostgreConstraint

    tableId           String              
    table             PostgreTable        @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model MongoRow {
    id               String               @id @default(uuid()) @unique
    name             String
    value            String
    type             MongoType
    constraints      MongoConstraint

    tableId          String
    table            MongoTable          @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Query {
    id               String              @id @default(uuid()) @unique
    title            String        
    description      String   
    tables           String  
    action           QueryAction
    code             String
    createdAt        DateTime            @default(now()) @unique

    projectId        String           
    project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
